// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role{
  ADMIN
  USER
}

enum OrderEventStatus{
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}
model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String 
  role Role @default(USER)
  defaultBillingAddress Int?
  defaultShippingAddress Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[] //one-to-many relation with product
  address Address?
  cartItem CartItem[]
  order Order[]

  @@map("users")
}

model Product{
  id Int @id @default(autoincrement())
  name String
  description String
  price Decimal
  tags String
  createdBy Int?
  creator User? @relation(fields: [createdBy], references: [id])
  cartItem CartItem[]
  orders OrderProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Address{
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  postcode String?
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model CartItem{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  netAmount Decimal
  address String
  status OrderEventStatus @default(PENDING)
  products OrderProduct[]
  events OrderEvent[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderProduct{
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent{
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_events")
}